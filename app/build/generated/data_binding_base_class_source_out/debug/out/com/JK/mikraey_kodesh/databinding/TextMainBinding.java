// Generated by view binder compiler. Do not edit!
package com.JK.mikraey_kodesh.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.WebView;
import android.widget.ExpandableListView;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.core.widget.NestedScrollView;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.JK.mikraey_kodesh.R;
import com.JK.mikraey_kodesh.SplitView;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.CollapsingToolbarLayout;
import com.google.android.material.bottomappbar.BottomAppBar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class TextMainBinding implements ViewBinding {
  @NonNull
  private final DrawerLayout rootView;

  @NonNull
  public final DrawerLayout TMDrawer;

  @NonNull
  public final AppBarLayout appbar;

  @NonNull
  public final LinearLayout backToMenuLl;

  @NonNull
  public final BottomAppBar bottomAppBar;

  @NonNull
  public final CollapsingToolbarLayout collapsingToolbar;

  @NonNull
  public final ImageButton decreaseFont;

  @NonNull
  public final ImageButton decreaseScrollBtn;

  @NonNull
  public final ImageButton exit;

  @NonNull
  public final ImageButton exitNoteButton;

  @NonNull
  public final ImageButton exitNoteButtonBlack;

  @NonNull
  public final LinearLayout handle;

  @NonNull
  public final ImageButton ibChapters;

  @NonNull
  public final ImageButton ibFindClose;

  @NonNull
  public final ImageButton ibFindNext;

  @NonNull
  public final ImageButton ibFindPrevious;

  @NonNull
  public final ImageButton ibNext;

  @NonNull
  public final ImageButton ibPrevious;

  @NonNull
  public final ImageButton increaseFont;

  @NonNull
  public final ImageButton increaseScrollBtn;

  @NonNull
  public final LinearLayout llMainLayout;

  @NonNull
  public final LinearLayout lnrFindOptions;

  @NonNull
  public final LinearLayout lnrOptions;

  @NonNull
  public final ExpandableListView menuExpLv;

  @NonNull
  public final LinearLayout primary;

  @NonNull
  public final LinearLayout scrollLayot;

  @NonNull
  public final NestedScrollView scrollView;

  @NonNull
  public final LinearLayout secondary;

  @NonNull
  public final SplitView splitView;

  @NonNull
  public final ImageButton stopScrollBtn;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final WebView webView1;

  @NonNull
  public final WebView webView2;

  private TextMainBinding(@NonNull DrawerLayout rootView, @NonNull DrawerLayout TMDrawer,
      @NonNull AppBarLayout appbar, @NonNull LinearLayout backToMenuLl,
      @NonNull BottomAppBar bottomAppBar, @NonNull CollapsingToolbarLayout collapsingToolbar,
      @NonNull ImageButton decreaseFont, @NonNull ImageButton decreaseScrollBtn,
      @NonNull ImageButton exit, @NonNull ImageButton exitNoteButton,
      @NonNull ImageButton exitNoteButtonBlack, @NonNull LinearLayout handle,
      @NonNull ImageButton ibChapters, @NonNull ImageButton ibFindClose,
      @NonNull ImageButton ibFindNext, @NonNull ImageButton ibFindPrevious,
      @NonNull ImageButton ibNext, @NonNull ImageButton ibPrevious,
      @NonNull ImageButton increaseFont, @NonNull ImageButton increaseScrollBtn,
      @NonNull LinearLayout llMainLayout, @NonNull LinearLayout lnrFindOptions,
      @NonNull LinearLayout lnrOptions, @NonNull ExpandableListView menuExpLv,
      @NonNull LinearLayout primary, @NonNull LinearLayout scrollLayot,
      @NonNull NestedScrollView scrollView, @NonNull LinearLayout secondary,
      @NonNull SplitView splitView, @NonNull ImageButton stopScrollBtn, @NonNull Toolbar toolbar,
      @NonNull WebView webView1, @NonNull WebView webView2) {
    this.rootView = rootView;
    this.TMDrawer = TMDrawer;
    this.appbar = appbar;
    this.backToMenuLl = backToMenuLl;
    this.bottomAppBar = bottomAppBar;
    this.collapsingToolbar = collapsingToolbar;
    this.decreaseFont = decreaseFont;
    this.decreaseScrollBtn = decreaseScrollBtn;
    this.exit = exit;
    this.exitNoteButton = exitNoteButton;
    this.exitNoteButtonBlack = exitNoteButtonBlack;
    this.handle = handle;
    this.ibChapters = ibChapters;
    this.ibFindClose = ibFindClose;
    this.ibFindNext = ibFindNext;
    this.ibFindPrevious = ibFindPrevious;
    this.ibNext = ibNext;
    this.ibPrevious = ibPrevious;
    this.increaseFont = increaseFont;
    this.increaseScrollBtn = increaseScrollBtn;
    this.llMainLayout = llMainLayout;
    this.lnrFindOptions = lnrFindOptions;
    this.lnrOptions = lnrOptions;
    this.menuExpLv = menuExpLv;
    this.primary = primary;
    this.scrollLayot = scrollLayot;
    this.scrollView = scrollView;
    this.secondary = secondary;
    this.splitView = splitView;
    this.stopScrollBtn = stopScrollBtn;
    this.toolbar = toolbar;
    this.webView1 = webView1;
    this.webView2 = webView2;
  }

  @Override
  @NonNull
  public DrawerLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static TextMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TextMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.text_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TextMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      DrawerLayout TMDrawer = (DrawerLayout) rootView;

      id = R.id.appbar;
      AppBarLayout appbar = ViewBindings.findChildViewById(rootView, id);
      if (appbar == null) {
        break missingId;
      }

      id = R.id.backToMenuLl;
      LinearLayout backToMenuLl = ViewBindings.findChildViewById(rootView, id);
      if (backToMenuLl == null) {
        break missingId;
      }

      id = R.id.bottom_app_bar;
      BottomAppBar bottomAppBar = ViewBindings.findChildViewById(rootView, id);
      if (bottomAppBar == null) {
        break missingId;
      }

      id = R.id.collapsing_toolbar;
      CollapsingToolbarLayout collapsingToolbar = ViewBindings.findChildViewById(rootView, id);
      if (collapsingToolbar == null) {
        break missingId;
      }

      id = R.id.decreaseFont;
      ImageButton decreaseFont = ViewBindings.findChildViewById(rootView, id);
      if (decreaseFont == null) {
        break missingId;
      }

      id = R.id.decreaseScrollBtn;
      ImageButton decreaseScrollBtn = ViewBindings.findChildViewById(rootView, id);
      if (decreaseScrollBtn == null) {
        break missingId;
      }

      id = R.id.exit;
      ImageButton exit = ViewBindings.findChildViewById(rootView, id);
      if (exit == null) {
        break missingId;
      }

      id = R.id.exitNoteButton;
      ImageButton exitNoteButton = ViewBindings.findChildViewById(rootView, id);
      if (exitNoteButton == null) {
        break missingId;
      }

      id = R.id.exitNoteButtonBlack;
      ImageButton exitNoteButtonBlack = ViewBindings.findChildViewById(rootView, id);
      if (exitNoteButtonBlack == null) {
        break missingId;
      }

      id = R.id.handle;
      LinearLayout handle = ViewBindings.findChildViewById(rootView, id);
      if (handle == null) {
        break missingId;
      }

      id = R.id.ibChapters;
      ImageButton ibChapters = ViewBindings.findChildViewById(rootView, id);
      if (ibChapters == null) {
        break missingId;
      }

      id = R.id.ibFindClose;
      ImageButton ibFindClose = ViewBindings.findChildViewById(rootView, id);
      if (ibFindClose == null) {
        break missingId;
      }

      id = R.id.ibFindNext;
      ImageButton ibFindNext = ViewBindings.findChildViewById(rootView, id);
      if (ibFindNext == null) {
        break missingId;
      }

      id = R.id.ibFindPrevious;
      ImageButton ibFindPrevious = ViewBindings.findChildViewById(rootView, id);
      if (ibFindPrevious == null) {
        break missingId;
      }

      id = R.id.ibNext;
      ImageButton ibNext = ViewBindings.findChildViewById(rootView, id);
      if (ibNext == null) {
        break missingId;
      }

      id = R.id.ibPrevious;
      ImageButton ibPrevious = ViewBindings.findChildViewById(rootView, id);
      if (ibPrevious == null) {
        break missingId;
      }

      id = R.id.increaseFont;
      ImageButton increaseFont = ViewBindings.findChildViewById(rootView, id);
      if (increaseFont == null) {
        break missingId;
      }

      id = R.id.increaseScrollBtn;
      ImageButton increaseScrollBtn = ViewBindings.findChildViewById(rootView, id);
      if (increaseScrollBtn == null) {
        break missingId;
      }

      id = R.id.llMainLayout;
      LinearLayout llMainLayout = ViewBindings.findChildViewById(rootView, id);
      if (llMainLayout == null) {
        break missingId;
      }

      id = R.id.lnrFindOptions;
      LinearLayout lnrFindOptions = ViewBindings.findChildViewById(rootView, id);
      if (lnrFindOptions == null) {
        break missingId;
      }

      id = R.id.lnrOptions;
      LinearLayout lnrOptions = ViewBindings.findChildViewById(rootView, id);
      if (lnrOptions == null) {
        break missingId;
      }

      id = R.id.menuExpLv;
      ExpandableListView menuExpLv = ViewBindings.findChildViewById(rootView, id);
      if (menuExpLv == null) {
        break missingId;
      }

      id = R.id.primary;
      LinearLayout primary = ViewBindings.findChildViewById(rootView, id);
      if (primary == null) {
        break missingId;
      }

      id = R.id.scrollLayot;
      LinearLayout scrollLayot = ViewBindings.findChildViewById(rootView, id);
      if (scrollLayot == null) {
        break missingId;
      }

      id = R.id.scroll_view;
      NestedScrollView scrollView = ViewBindings.findChildViewById(rootView, id);
      if (scrollView == null) {
        break missingId;
      }

      id = R.id.secondary;
      LinearLayout secondary = ViewBindings.findChildViewById(rootView, id);
      if (secondary == null) {
        break missingId;
      }

      id = R.id.split_view;
      SplitView splitView = ViewBindings.findChildViewById(rootView, id);
      if (splitView == null) {
        break missingId;
      }

      id = R.id.stopScrollBtn;
      ImageButton stopScrollBtn = ViewBindings.findChildViewById(rootView, id);
      if (stopScrollBtn == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.webView1;
      WebView webView1 = ViewBindings.findChildViewById(rootView, id);
      if (webView1 == null) {
        break missingId;
      }

      id = R.id.webView2;
      WebView webView2 = ViewBindings.findChildViewById(rootView, id);
      if (webView2 == null) {
        break missingId;
      }

      return new TextMainBinding((DrawerLayout) rootView, TMDrawer, appbar, backToMenuLl,
          bottomAppBar, collapsingToolbar, decreaseFont, decreaseScrollBtn, exit, exitNoteButton,
          exitNoteButtonBlack, handle, ibChapters, ibFindClose, ibFindNext, ibFindPrevious, ibNext,
          ibPrevious, increaseFont, increaseScrollBtn, llMainLayout, lnrFindOptions, lnrOptions,
          menuExpLv, primary, scrollLayot, scrollView, secondary, splitView, stopScrollBtn, toolbar,
          webView1, webView2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
